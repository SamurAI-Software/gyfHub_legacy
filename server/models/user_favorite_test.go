// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserFavorites(t *testing.T) {
	t.Parallel()

	query := UserFavorites()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserFavoritesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserFavoritesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserFavorites().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserFavoritesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserFavoriteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserFavoritesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserFavoriteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserFavorite exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserFavoriteExists to return true, but got false.")
	}
}

func testUserFavoritesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userFavoriteFound, err := FindUserFavorite(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userFavoriteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserFavoritesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserFavorites().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserFavoritesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserFavorites().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserFavoritesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userFavoriteOne := &UserFavorite{}
	userFavoriteTwo := &UserFavorite{}
	if err = randomize.Struct(seed, userFavoriteOne, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}
	if err = randomize.Struct(seed, userFavoriteTwo, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userFavoriteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userFavoriteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserFavorites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserFavoritesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userFavoriteOne := &UserFavorite{}
	userFavoriteTwo := &UserFavorite{}
	if err = randomize.Struct(seed, userFavoriteOne, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}
	if err = randomize.Struct(seed, userFavoriteTwo, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userFavoriteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userFavoriteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userFavoriteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func userFavoriteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserFavorite) error {
	*o = UserFavorite{}
	return nil
}

func testUserFavoritesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserFavorite{}
	o := &UserFavorite{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserFavorite object: %s", err)
	}

	AddUserFavoriteHook(boil.BeforeInsertHook, userFavoriteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userFavoriteBeforeInsertHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.AfterInsertHook, userFavoriteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userFavoriteAfterInsertHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.AfterSelectHook, userFavoriteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userFavoriteAfterSelectHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.BeforeUpdateHook, userFavoriteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userFavoriteBeforeUpdateHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.AfterUpdateHook, userFavoriteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userFavoriteAfterUpdateHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.BeforeDeleteHook, userFavoriteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userFavoriteBeforeDeleteHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.AfterDeleteHook, userFavoriteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userFavoriteAfterDeleteHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.BeforeUpsertHook, userFavoriteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userFavoriteBeforeUpsertHooks = []UserFavoriteHook{}

	AddUserFavoriteHook(boil.AfterUpsertHook, userFavoriteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userFavoriteAfterUpsertHooks = []UserFavoriteHook{}
}

func testUserFavoritesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserFavoritesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userFavoriteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserFavoriteToOneGifUsingGif(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserFavorite
	var foreign Gif

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GifID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Gif().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserFavoriteSlice{&local}
	if err = local.L.LoadGif(ctx, tx, false, (*[]*UserFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gif == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Gif = nil
	if err = local.L.LoadGif(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gif == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserFavoriteToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserFavorite
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserFavoriteSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserFavoriteToOneSetOpGifUsingGif(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserFavorite
	var b, c Gif

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userFavoriteDBTypes, false, strmangle.SetComplement(userFavoritePrimaryKeyColumns, userFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Gif{&b, &c} {
		err = a.SetGif(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Gif != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserFavorites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GifID != x.ID {
			t.Error("foreign key was wrong value", a.GifID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GifID))
		reflect.Indirect(reflect.ValueOf(&a.GifID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GifID != x.ID {
			t.Error("foreign key was wrong value", a.GifID, x.ID)
		}
	}
}
func testUserFavoriteToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserFavorite
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userFavoriteDBTypes, false, strmangle.SetComplement(userFavoritePrimaryKeyColumns, userFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserFavorites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserFavoritesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserFavoritesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserFavoriteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserFavoritesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserFavorites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userFavoriteDBTypes = map[string]string{`ID`: `text`, `UserID`: `text`, `GifID`: `text`, `Category`: `text`}
	_                   = bytes.MinRead
)

func testUserFavoritesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userFavoriteAllColumns) == len(userFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserFavoritesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userFavoriteAllColumns) == len(userFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserFavorite{}
	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userFavoriteDBTypes, true, userFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userFavoriteAllColumns, userFavoritePrimaryKeyColumns) {
		fields = userFavoriteAllColumns
	} else {
		fields = strmangle.SetComplement(
			userFavoriteAllColumns,
			userFavoritePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserFavoriteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserFavoritesUpsert(t *testing.T) {
	t.Parallel()

	if len(userFavoriteAllColumns) == len(userFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserFavorite{}
	if err = randomize.Struct(seed, &o, userFavoriteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserFavorite: %s", err)
	}

	count, err := UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userFavoriteDBTypes, false, userFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserFavorite struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserFavorite: %s", err)
	}

	count, err = UserFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

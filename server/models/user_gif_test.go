// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserGifs(t *testing.T) {
	t.Parallel()

	query := UserGifs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserGifsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGifsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserGifs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGifsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserGifSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserGifsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserGifExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserGif exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserGifExists to return true, but got false.")
	}
}

func testUserGifsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userGifFound, err := FindUserGif(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userGifFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserGifsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserGifs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserGifsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserGifs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserGifsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userGifOne := &UserGif{}
	userGifTwo := &UserGif{}
	if err = randomize.Struct(seed, userGifOne, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}
	if err = randomize.Struct(seed, userGifTwo, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userGifOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userGifTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserGifs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserGifsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userGifOne := &UserGif{}
	userGifTwo := &UserGif{}
	if err = randomize.Struct(seed, userGifOne, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}
	if err = randomize.Struct(seed, userGifTwo, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userGifOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userGifTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userGifBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func userGifAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserGif) error {
	*o = UserGif{}
	return nil
}

func testUserGifsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserGif{}
	o := &UserGif{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userGifDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserGif object: %s", err)
	}

	AddUserGifHook(boil.BeforeInsertHook, userGifBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userGifBeforeInsertHooks = []UserGifHook{}

	AddUserGifHook(boil.AfterInsertHook, userGifAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userGifAfterInsertHooks = []UserGifHook{}

	AddUserGifHook(boil.AfterSelectHook, userGifAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userGifAfterSelectHooks = []UserGifHook{}

	AddUserGifHook(boil.BeforeUpdateHook, userGifBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userGifBeforeUpdateHooks = []UserGifHook{}

	AddUserGifHook(boil.AfterUpdateHook, userGifAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userGifAfterUpdateHooks = []UserGifHook{}

	AddUserGifHook(boil.BeforeDeleteHook, userGifBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userGifBeforeDeleteHooks = []UserGifHook{}

	AddUserGifHook(boil.AfterDeleteHook, userGifAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userGifAfterDeleteHooks = []UserGifHook{}

	AddUserGifHook(boil.BeforeUpsertHook, userGifBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userGifBeforeUpsertHooks = []UserGifHook{}

	AddUserGifHook(boil.AfterUpsertHook, userGifAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userGifAfterUpsertHooks = []UserGifHook{}
}

func testUserGifsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserGifsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userGifColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserGifToOneGifUsingGif(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserGif
	var foreign Gif

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GifID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Gif().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserGifSlice{&local}
	if err = local.L.LoadGif(ctx, tx, false, (*[]*UserGif)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gif == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Gif = nil
	if err = local.L.LoadGif(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gif == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserGifToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserGif
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userGifDBTypes, false, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserGifSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserGif)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserGifToOneSetOpGifUsingGif(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserGif
	var b, c Gif

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userGifDBTypes, false, strmangle.SetComplement(userGifPrimaryKeyColumns, userGifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Gif{&b, &c} {
		err = a.SetGif(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Gif != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserGif != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GifID != x.ID {
			t.Error("foreign key was wrong value", a.GifID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GifID))
		reflect.Indirect(reflect.ValueOf(&a.GifID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GifID != x.ID {
			t.Error("foreign key was wrong value", a.GifID, x.ID)
		}
	}
}
func testUserGifToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserGif
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userGifDBTypes, false, strmangle.SetComplement(userGifPrimaryKeyColumns, userGifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserGifs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserGifsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserGifsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserGifSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserGifsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserGifs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userGifDBTypes = map[string]string{`ID`: `text`, `UserID`: `text`, `GifID`: `text`}
	_              = bytes.MinRead
)

func testUserGifsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userGifPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userGifAllColumns) == len(userGifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserGifsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userGifAllColumns) == len(userGifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserGif{}
	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userGifDBTypes, true, userGifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userGifAllColumns, userGifPrimaryKeyColumns) {
		fields = userGifAllColumns
	} else {
		fields = strmangle.SetComplement(
			userGifAllColumns,
			userGifPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserGifSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserGifsUpsert(t *testing.T) {
	t.Parallel()

	if len(userGifAllColumns) == len(userGifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserGif{}
	if err = randomize.Struct(seed, &o, userGifDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserGif: %s", err)
	}

	count, err := UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userGifDBTypes, false, userGifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserGif: %s", err)
	}

	count, err = UserGifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserFavorite is an object representing the database table.
type UserFavorite struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	FavoriteID string `boil:"favorite_id" json:"favorite_id" toml:"favorite_id" yaml:"favorite_id"`

	R *userFavoriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userFavoriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserFavoriteColumns = struct {
	ID         string
	UserID     string
	FavoriteID string
}{
	ID:         "id",
	UserID:     "user_id",
	FavoriteID: "favorite_id",
}

// Generated where

var UserFavoriteWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	FavoriteID whereHelperstring
}{
	ID:         whereHelperstring{field: "\"user_favorite\".\"id\""},
	UserID:     whereHelperstring{field: "\"user_favorite\".\"user_id\""},
	FavoriteID: whereHelperstring{field: "\"user_favorite\".\"favorite_id\""},
}

// UserFavoriteRels is where relationship names are stored.
var UserFavoriteRels = struct {
	Favorite string
	User     string
}{
	Favorite: "Favorite",
	User:     "User",
}

// userFavoriteR is where relationships are stored.
type userFavoriteR struct {
	Favorite *Favorite
	User     *User
}

// NewStruct creates a new relationship struct
func (*userFavoriteR) NewStruct() *userFavoriteR {
	return &userFavoriteR{}
}

// userFavoriteL is where Load methods for each relationship are stored.
type userFavoriteL struct{}

var (
	userFavoriteAllColumns            = []string{"id", "user_id", "favorite_id"}
	userFavoriteColumnsWithoutDefault = []string{"id", "user_id", "favorite_id"}
	userFavoriteColumnsWithDefault    = []string{}
	userFavoritePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserFavoriteSlice is an alias for a slice of pointers to UserFavorite.
	// This should generally be used opposed to []UserFavorite.
	UserFavoriteSlice []*UserFavorite
	// UserFavoriteHook is the signature for custom UserFavorite hook methods
	UserFavoriteHook func(context.Context, boil.ContextExecutor, *UserFavorite) error

	userFavoriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFavoriteType                 = reflect.TypeOf(&UserFavorite{})
	userFavoriteMapping              = queries.MakeStructMapping(userFavoriteType)
	userFavoritePrimaryKeyMapping, _ = queries.BindMapping(userFavoriteType, userFavoriteMapping, userFavoritePrimaryKeyColumns)
	userFavoriteInsertCacheMut       sync.RWMutex
	userFavoriteInsertCache          = make(map[string]insertCache)
	userFavoriteUpdateCacheMut       sync.RWMutex
	userFavoriteUpdateCache          = make(map[string]updateCache)
	userFavoriteUpsertCacheMut       sync.RWMutex
	userFavoriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userFavoriteBeforeInsertHooks []UserFavoriteHook
var userFavoriteBeforeUpdateHooks []UserFavoriteHook
var userFavoriteBeforeDeleteHooks []UserFavoriteHook
var userFavoriteBeforeUpsertHooks []UserFavoriteHook

var userFavoriteAfterInsertHooks []UserFavoriteHook
var userFavoriteAfterSelectHooks []UserFavoriteHook
var userFavoriteAfterUpdateHooks []UserFavoriteHook
var userFavoriteAfterDeleteHooks []UserFavoriteHook
var userFavoriteAfterUpsertHooks []UserFavoriteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserFavorite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserFavorite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserFavorite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserFavorite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserFavorite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserFavorite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserFavorite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserFavorite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserFavorite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoriteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserFavoriteHook registers your hook function for all future operations.
func AddUserFavoriteHook(hookPoint boil.HookPoint, userFavoriteHook UserFavoriteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userFavoriteBeforeInsertHooks = append(userFavoriteBeforeInsertHooks, userFavoriteHook)
	case boil.BeforeUpdateHook:
		userFavoriteBeforeUpdateHooks = append(userFavoriteBeforeUpdateHooks, userFavoriteHook)
	case boil.BeforeDeleteHook:
		userFavoriteBeforeDeleteHooks = append(userFavoriteBeforeDeleteHooks, userFavoriteHook)
	case boil.BeforeUpsertHook:
		userFavoriteBeforeUpsertHooks = append(userFavoriteBeforeUpsertHooks, userFavoriteHook)
	case boil.AfterInsertHook:
		userFavoriteAfterInsertHooks = append(userFavoriteAfterInsertHooks, userFavoriteHook)
	case boil.AfterSelectHook:
		userFavoriteAfterSelectHooks = append(userFavoriteAfterSelectHooks, userFavoriteHook)
	case boil.AfterUpdateHook:
		userFavoriteAfterUpdateHooks = append(userFavoriteAfterUpdateHooks, userFavoriteHook)
	case boil.AfterDeleteHook:
		userFavoriteAfterDeleteHooks = append(userFavoriteAfterDeleteHooks, userFavoriteHook)
	case boil.AfterUpsertHook:
		userFavoriteAfterUpsertHooks = append(userFavoriteAfterUpsertHooks, userFavoriteHook)
	}
}

// One returns a single userFavorite record from the query.
func (q userFavoriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserFavorite, error) {
	o := &UserFavorite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_favorite")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserFavorite records from the query.
func (q userFavoriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserFavoriteSlice, error) {
	var o []*UserFavorite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserFavorite slice")
	}

	if len(userFavoriteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserFavorite records in the query.
func (q userFavoriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_favorite rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userFavoriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_favorite exists")
	}

	return count > 0, nil
}

// Favorite pointed to by the foreign key.
func (o *UserFavorite) Favorite(mods ...qm.QueryMod) favoriteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FavoriteID),
	}

	queryMods = append(queryMods, mods...)

	query := Favorites(queryMods...)
	queries.SetFrom(query.Query, "\"favorites\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserFavorite) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadFavorite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavoriteL) LoadFavorite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavorite interface{}, mods queries.Applicator) error {
	var slice []*UserFavorite
	var object *UserFavorite

	if singular {
		object = maybeUserFavorite.(*UserFavorite)
	} else {
		slice = *maybeUserFavorite.(*[]*UserFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavoriteR{}
		}
		args = append(args, object.FavoriteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavoriteR{}
			}

			for _, a := range args {
				if a == obj.FavoriteID {
					continue Outer
				}
			}

			args = append(args, obj.FavoriteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`favorites`), qm.WhereIn(`favorites.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Favorite")
	}

	var resultSlice []*Favorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Favorite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for favorites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorites")
	}

	if len(userFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Favorite = foreign
		if foreign.R == nil {
			foreign.R = &favoriteR{}
		}
		foreign.R.UserFavorites = append(foreign.R.UserFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FavoriteID == foreign.ID {
				local.R.Favorite = foreign
				if foreign.R == nil {
					foreign.R = &favoriteR{}
				}
				foreign.R.UserFavorites = append(foreign.R.UserFavorites, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavoriteL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavorite interface{}, mods queries.Applicator) error {
	var slice []*UserFavorite
	var object *UserFavorite

	if singular {
		object = maybeUserFavorite.(*UserFavorite)
	} else {
		slice = *maybeUserFavorite.(*[]*UserFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavoriteR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavoriteR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserFavorites = append(foreign.R.UserFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserFavorites = append(foreign.R.UserFavorites, local)
				break
			}
		}
	}

	return nil
}

// SetFavorite of the userFavorite to the related item.
// Sets o.R.Favorite to related.
// Adds o to related.R.UserFavorites.
func (o *UserFavorite) SetFavorite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Favorite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"favorite_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FavoriteID = related.ID
	if o.R == nil {
		o.R = &userFavoriteR{
			Favorite: related,
		}
	} else {
		o.R.Favorite = related
	}

	if related.R == nil {
		related.R = &favoriteR{
			UserFavorites: UserFavoriteSlice{o},
		}
	} else {
		related.R.UserFavorites = append(related.R.UserFavorites, o)
	}

	return nil
}

// SetUser of the userFavorite to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserFavorites.
func (o *UserFavorite) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userFavoriteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserFavorites: UserFavoriteSlice{o},
		}
	} else {
		related.R.UserFavorites = append(related.R.UserFavorites, o)
	}

	return nil
}

// UserFavorites retrieves all the records using an executor.
func UserFavorites(mods ...qm.QueryMod) userFavoriteQuery {
	mods = append(mods, qm.From("\"user_favorite\""))
	return userFavoriteQuery{NewQuery(mods...)}
}

// FindUserFavorite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserFavorite(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserFavorite, error) {
	userFavoriteObj := &UserFavorite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_favorite\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userFavoriteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_favorite")
	}

	return userFavoriteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserFavorite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_favorite provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavoriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userFavoriteInsertCacheMut.RLock()
	cache, cached := userFavoriteInsertCache[key]
	userFavoriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userFavoriteAllColumns,
			userFavoriteColumnsWithDefault,
			userFavoriteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userFavoriteType, userFavoriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userFavoriteType, userFavoriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_favorite\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_favorite\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_favorite")
	}

	if !cached {
		userFavoriteInsertCacheMut.Lock()
		userFavoriteInsertCache[key] = cache
		userFavoriteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserFavorite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserFavorite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userFavoriteUpdateCacheMut.RLock()
	cache, cached := userFavoriteUpdateCache[key]
	userFavoriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userFavoriteAllColumns,
			userFavoritePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_favorite, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_favorite\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userFavoritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userFavoriteType, userFavoriteMapping, append(wl, userFavoritePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_favorite row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_favorite")
	}

	if !cached {
		userFavoriteUpdateCacheMut.Lock()
		userFavoriteUpdateCache[key] = cache
		userFavoriteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userFavoriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_favorite")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserFavoriteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userFavoritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userFavorite")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserFavorite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_favorite provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavoriteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userFavoriteUpsertCacheMut.RLock()
	cache, cached := userFavoriteUpsertCache[key]
	userFavoriteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userFavoriteAllColumns,
			userFavoriteColumnsWithDefault,
			userFavoriteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userFavoriteAllColumns,
			userFavoritePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_favorite, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userFavoritePrimaryKeyColumns))
			copy(conflict, userFavoritePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_favorite\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userFavoriteType, userFavoriteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userFavoriteType, userFavoriteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_favorite")
	}

	if !cached {
		userFavoriteUpsertCacheMut.Lock()
		userFavoriteUpsertCache[key] = cache
		userFavoriteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserFavorite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserFavorite) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserFavorite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userFavoritePrimaryKeyMapping)
	sql := "DELETE FROM \"user_favorite\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_favorite")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userFavoriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userFavoriteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_favorite")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserFavoriteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userFavoriteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_favorite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFavoritePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_favorite")
	}

	if len(userFavoriteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserFavorite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserFavorite(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFavoriteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserFavoriteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_favorite\".* FROM \"user_favorite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFavoritePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserFavoriteSlice")
	}

	*o = slice

	return nil
}

// UserFavoriteExists checks if the UserFavorite row exists.
func UserFavoriteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_favorite\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_favorite exists")
	}

	return exists, nil
}

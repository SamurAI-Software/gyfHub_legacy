// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGifs(t *testing.T) {
	t.Parallel()

	query := Gifs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGifsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGifsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Gifs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGifsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GifSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGifsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GifExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Gif exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GifExists to return true, but got false.")
	}
}

func testGifsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gifFound, err := FindGif(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gifFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGifsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Gifs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGifsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Gifs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGifsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gifOne := &Gif{}
	gifTwo := &Gif{}
	if err = randomize.Struct(seed, gifOne, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}
	if err = randomize.Struct(seed, gifTwo, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gifOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gifTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Gifs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGifsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gifOne := &Gif{}
	gifTwo := &Gif{}
	if err = randomize.Struct(seed, gifOne, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}
	if err = randomize.Struct(seed, gifTwo, gifDBTypes, false, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gifOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gifTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gifBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func gifAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Gif) error {
	*o = Gif{}
	return nil
}

func testGifsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Gif{}
	o := &Gif{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gifDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Gif object: %s", err)
	}

	AddGifHook(boil.BeforeInsertHook, gifBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gifBeforeInsertHooks = []GifHook{}

	AddGifHook(boil.AfterInsertHook, gifAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gifAfterInsertHooks = []GifHook{}

	AddGifHook(boil.AfterSelectHook, gifAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gifAfterSelectHooks = []GifHook{}

	AddGifHook(boil.BeforeUpdateHook, gifBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gifBeforeUpdateHooks = []GifHook{}

	AddGifHook(boil.AfterUpdateHook, gifAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gifAfterUpdateHooks = []GifHook{}

	AddGifHook(boil.BeforeDeleteHook, gifBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gifBeforeDeleteHooks = []GifHook{}

	AddGifHook(boil.AfterDeleteHook, gifAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gifAfterDeleteHooks = []GifHook{}

	AddGifHook(boil.BeforeUpsertHook, gifBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gifBeforeUpsertHooks = []GifHook{}

	AddGifHook(boil.AfterUpsertHook, gifAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gifAfterUpsertHooks = []GifHook{}
}

func testGifsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGifsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gifColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGifOneToOneUserGifUsingUserGif(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UserGif
	var local Gif

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, userGifDBTypes, true, userGifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserGif struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.GifID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserGif().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GifID != foreign.GifID {
		t.Errorf("want: %v, got %v", foreign.GifID, check.GifID)
	}

	slice := GifSlice{&local}
	if err = local.L.LoadUserGif(ctx, tx, false, (*[]*Gif)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserGif == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserGif = nil
	if err = local.L.LoadUserGif(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserGif == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGifOneToOneSetOpUserGifUsingUserGif(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Gif
	var b, c UserGif

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userGifDBTypes, false, strmangle.SetComplement(userGifPrimaryKeyColumns, userGifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userGifDBTypes, false, strmangle.SetComplement(userGifPrimaryKeyColumns, userGifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserGif{&b, &c} {
		err = a.SetUserGif(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserGif != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Gif != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.GifID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.GifID))
		reflect.Indirect(reflect.ValueOf(&x.GifID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.GifID {
			t.Error("foreign key was wrong value", a.ID, x.GifID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testGifToManyChatMSGS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Gif
	var b, c ChatMSG

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chatMSGDBTypes, false, chatMSGColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatMSGDBTypes, false, chatMSGColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GifID = a.ID
	c.GifID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChatMSGS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GifID == b.GifID {
			bFound = true
		}
		if v.GifID == c.GifID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GifSlice{&a}
	if err = a.L.LoadChatMSGS(ctx, tx, false, (*[]*Gif)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChatMSGS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChatMSGS = nil
	if err = a.L.LoadChatMSGS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChatMSGS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGifToManyUserFavorites(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Gif
	var b, c UserFavorite

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userFavoriteDBTypes, false, userFavoriteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GifID = a.ID
	c.GifID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserFavorites().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GifID == b.GifID {
			bFound = true
		}
		if v.GifID == c.GifID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GifSlice{&a}
	if err = a.L.LoadUserFavorites(ctx, tx, false, (*[]*Gif)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserFavorites); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserFavorites = nil
	if err = a.L.LoadUserFavorites(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserFavorites); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGifToManyAddOpChatMSGS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Gif
	var b, c, d, e ChatMSG

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatMSG{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatMSGDBTypes, false, strmangle.SetComplement(chatMSGPrimaryKeyColumns, chatMSGColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChatMSG{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChatMSGS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GifID {
			t.Error("foreign key was wrong value", a.ID, first.GifID)
		}
		if a.ID != second.GifID {
			t.Error("foreign key was wrong value", a.ID, second.GifID)
		}

		if first.R.Gif != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Gif != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChatMSGS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChatMSGS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChatMSGS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGifToManyAddOpUserFavorites(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Gif
	var b, c, d, e UserFavorite

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gifDBTypes, false, strmangle.SetComplement(gifPrimaryKeyColumns, gifColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserFavorite{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userFavoriteDBTypes, false, strmangle.SetComplement(userFavoritePrimaryKeyColumns, userFavoriteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserFavorite{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserFavorites(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GifID {
			t.Error("foreign key was wrong value", a.ID, first.GifID)
		}
		if a.ID != second.GifID {
			t.Error("foreign key was wrong value", a.ID, second.GifID)
		}

		if first.R.Gif != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Gif != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserFavorites[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserFavorites[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserFavorites().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGifsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGifsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GifSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGifsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Gifs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gifDBTypes = map[string]string{`ID`: `text`, `GifData`: `bytea`}
	_          = bytes.MinRead
)

func testGifsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gifPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gifAllColumns) == len(gifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gifDBTypes, true, gifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGifsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gifAllColumns) == len(gifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Gif{}
	if err = randomize.Struct(seed, o, gifDBTypes, true, gifColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gifDBTypes, true, gifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gifAllColumns, gifPrimaryKeyColumns) {
		fields = gifAllColumns
	} else {
		fields = strmangle.SetComplement(
			gifAllColumns,
			gifPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GifSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGifsUpsert(t *testing.T) {
	t.Parallel()

	if len(gifAllColumns) == len(gifPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Gif{}
	if err = randomize.Struct(seed, &o, gifDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Gif: %s", err)
	}

	count, err := Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gifDBTypes, false, gifPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Gif struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Gif: %s", err)
	}

	count, err = Gifs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
